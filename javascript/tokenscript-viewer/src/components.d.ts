/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { TokenScriptEngine } from "../../engine-js/src/Engine";
import { ITokenDetail } from "../../engine-js/src/tokens/ITokenDetail";
import { TokenScript } from "../../engine-js/src/TokenScript";
import { AppRoot, ShowToastEventArgs, TokenScriptSource } from "./components/app/app";
import { TokenScriptSource as TokenScriptSource1 } from "./components/app/app";
import { JSX } from "@stencil/core";
import { TokenScript as TokenScript1 } from "@tokenscript/engine-js/src/TokenScript";
import { IntegrationViewer } from "./components/viewers/integration/integration-viewer";
import { Card } from "@tokenscript/engine-js/src/tokenScript/Card";
import { TabbedViewer } from "./components/viewers/tabbed/tabbed-viewer";
import { TokenGridContext } from "./components/viewers/util/getTokensFlat";
import { IOriginSecurityInfo } from "@tokenscript/engine-js/src/tokenScript/Origin";
import { SupportedWalletProviders } from "./components/wallet/Web3WalletProvider";
export { TokenScriptEngine } from "../../engine-js/src/Engine";
export { ITokenDetail } from "../../engine-js/src/tokens/ITokenDetail";
export { TokenScript } from "../../engine-js/src/TokenScript";
export { AppRoot, ShowToastEventArgs, TokenScriptSource } from "./components/app/app";
export { TokenScriptSource as TokenScriptSource1 } from "./components/app/app";
export { JSX } from "@stencil/core";
export { TokenScript as TokenScript1 } from "@tokenscript/engine-js/src/TokenScript";
export { IntegrationViewer } from "./components/viewers/integration/integration-viewer";
export { Card } from "@tokenscript/engine-js/src/tokenScript/Card";
export { TabbedViewer } from "./components/viewers/tabbed/tabbed-viewer";
export { TokenGridContext } from "./components/viewers/util/getTokensFlat";
export { IOriginSecurityInfo } from "@tokenscript/engine-js/src/tokenScript/Origin";
export { SupportedWalletProviders } from "./components/wallet/Web3WalletProvider";
export namespace Components {
    interface AboutTokenscript {
    }
    interface ActionBar {
        "actionsEnabled"?: boolean;
        "engine": TokenScriptEngine;
        "tokenDetails"?: ITokenDetail;
        "tokenScript"?: TokenScript;
    }
    interface ActionOverflowModal {
        "closeDialog": () => Promise<void>;
        "openDialog": () => Promise<void>;
    }
    interface AddSelector {
        "closeDialog": () => Promise<void>;
        "onFormSubmit": (type: TokenScriptSource, data: {tsId?: string, xml?: File}) => Promise<void>;
        "openDialog": () => Promise<void>;
    }
    interface AlphawalletViewer {
        "app": AppRoot;
    }
    interface AppRoot {
        "loadTokenscript": (source: TokenScriptSource1, tsId?: string, file?: File | string) => Promise<TokenScript>;
        "showToast": (type: 'success' | 'info' | 'warning' | 'error', title: string, description: string | JSX.Element) => Promise<void>;
    }
    interface AttributeTable {
    }
    interface CardModal {
        "tokenScript"?: TokenScript1;
    }
    interface CardPopover {
        "tokenScript": TokenScript;
    }
    interface CardView {
    }
    interface ConfirmStep {
        "tokenScript": TokenScript1;
        "viewer": IntegrationViewer;
    }
    interface InputField {
        "getFile": () => Promise<File>;
        "label": string;
        "name": string;
        "pattern"?: string;
        "required": boolean;
        "type": string;
        "value": any;
    }
    interface IntegrationViewer {
        "app": AppRoot;
    }
    interface LoadingSpinner {
        "color": string;
        "size": "large"|"small";
    }
    interface MooarViewer {
        "app": AppRoot;
    }
    interface NewViewer {
        "app": AppRoot;
    }
    interface OpenseaViewer {
        "app": AppRoot;
    }
    interface PopoverDialog {
        "closeDialog": () => Promise<void>;
        "dialogStyles": {[cssProp: string]: string};
        "disableClose": boolean;
        "fullScreen": boolean;
        "openDialog": (dismissCallback?: () => void | Promise<void>) => Promise<void>;
    }
    interface SecurityStatus {
        "size": "large"|"small";
        "tokenScript": TokenScript1;
    }
    interface SelectField {
        "label": string;
        "name": string;
        "options": {label: string, value: string}[];
        "value": string;
    }
    interface SelectStep {
        "card": Card;
        "tokenScript": TokenScript1;
        "viewer": IntegrationViewer;
    }
    interface StartTab {
        "tabId": string;
        "tabView": TabbedViewer;
    }
    interface StsViewer {
        "app": AppRoot;
    }
    interface TabHeaderItem {
        "closable": boolean;
        "tabId": string;
        "tabTitle": string;
        "tabView": TabbedViewer;
    }
    interface TabbedViewer {
        "app": AppRoot;
        "closeTab": (id: string) => Promise<void>;
        "openTokenScriptTab": (source: TokenScriptSource, tsId?: string, file?: File, emulator?: string) => Promise<void>;
        "showTab": (id: string) => Promise<void>;
    }
    interface TokenButton {
        "buttonTitle": string;
        "clickHandler": (token: TokenGridContext) => void;
        "enabled": boolean;
        "token": TokenGridContext;
    }
    interface TokenIcon {
        "imageTitle": string;
        "src": string;
    }
    interface TokenInfoPopover {
        "closeDialog": () => Promise<void>;
        "openDialog": (token: TokenGridContext) => Promise<void>;
        "tokenScript": TokenScript;
    }
    interface TokenSecurityStatus {
        "originId": string;
        "tokenScript": TokenScript1;
    }
    interface TokenSecurityStatusPopover {
        "openDialog": (tokenSecInfo: Partial<IOriginSecurityInfo>) => Promise<void>;
    }
    interface TokenViewer {
        "app": AppRoot;
    }
    interface TokensGrid {
        "openActionOverflowModal": (buttons: JSX.Element[]) => void;
        "showCard": (card: Card, token?: TokenGridContext, cardIndex?: number) => void;
        "tokenScript": TokenScript1;
    }
    interface TokensGridItem {
        "openActionOverflowModal": (buttons: JSX.Element[]) => void;
        "showCard": (card: Card, token: TokenGridContext, index: number) => void;
        "token": TokenGridContext;
        "tokenScript": TokenScript1;
    }
    interface TokenscriptButton {
        "enabled": boolean;
        "imageUrl": string;
        "name": string;
        "onRemove"?: (tsId: string) => Promise<void>;
        "tokenScript"?: TokenScript1;
        "tsId": string;
    }
    interface TokenscriptGrid {
    }
    interface TransferDialog {
        "closeDialog": () => Promise<void>;
        "engine": TokenScriptEngine;
        "openDialog": () => Promise<void>;
        "tokenDetails": ITokenDetail;
    }
    interface ViewStep {
        "card": Card;
        "tokenScript": TokenScript1;
        "viewer": IntegrationViewer;
    }
    interface ViewerPopover {
        "close": () => Promise<void>;
        "open": (tokenScript: TokenScript1) => Promise<void>;
    }
    interface ViewerTab {
        "app": AppRoot;
        "tabId": string;
        "tokenScript": TokenScript;
    }
    interface WalletButton {
    }
    interface WalletSelector {
        "connectWallet": () => Promise<SupportedWalletProviders>;
    }
}
export interface ActionBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLActionBarElement;
}
export interface AlphawalletViewerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlphawalletViewerElement;
}
export interface CardModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCardModalElement;
}
export interface CardPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCardPopoverElement;
}
export interface MooarViewerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMooarViewerElement;
}
export interface NewViewerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNewViewerElement;
}
export interface OpenseaViewerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOpenseaViewerElement;
}
export interface StsViewerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStsViewerElement;
}
export interface TokenViewerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTokenViewerElement;
}
export interface TokensGridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTokensGridElement;
}
export interface TransferDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTransferDialogElement;
}
export interface ViewStepCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLViewStepElement;
}
export interface ViewerPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLViewerPopoverElement;
}
export interface ViewerTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLViewerTabElement;
}
declare global {
    interface HTMLAboutTokenscriptElement extends Components.AboutTokenscript, HTMLStencilElement {
    }
    var HTMLAboutTokenscriptElement: {
        prototype: HTMLAboutTokenscriptElement;
        new (): HTMLAboutTokenscriptElement;
    };
    interface HTMLActionBarElementEventMap {
        "showToast": ShowToastEventArgs;
        "showLoader": void;
        "hideLoader": void;
    }
    interface HTMLActionBarElement extends Components.ActionBar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLActionBarElementEventMap>(type: K, listener: (this: HTMLActionBarElement, ev: ActionBarCustomEvent<HTMLActionBarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLActionBarElementEventMap>(type: K, listener: (this: HTMLActionBarElement, ev: ActionBarCustomEvent<HTMLActionBarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLActionBarElement: {
        prototype: HTMLActionBarElement;
        new (): HTMLActionBarElement;
    };
    interface HTMLActionOverflowModalElement extends Components.ActionOverflowModal, HTMLStencilElement {
    }
    var HTMLActionOverflowModalElement: {
        prototype: HTMLActionOverflowModalElement;
        new (): HTMLActionOverflowModalElement;
    };
    interface HTMLAddSelectorElement extends Components.AddSelector, HTMLStencilElement {
    }
    var HTMLAddSelectorElement: {
        prototype: HTMLAddSelectorElement;
        new (): HTMLAddSelectorElement;
    };
    interface HTMLAlphawalletViewerElementEventMap {
        "showToast": ShowToastEventArgs;
        "showLoader": void;
        "hideLoader": void;
    }
    interface HTMLAlphawalletViewerElement extends Components.AlphawalletViewer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlphawalletViewerElementEventMap>(type: K, listener: (this: HTMLAlphawalletViewerElement, ev: AlphawalletViewerCustomEvent<HTMLAlphawalletViewerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlphawalletViewerElementEventMap>(type: K, listener: (this: HTMLAlphawalletViewerElement, ev: AlphawalletViewerCustomEvent<HTMLAlphawalletViewerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlphawalletViewerElement: {
        prototype: HTMLAlphawalletViewerElement;
        new (): HTMLAlphawalletViewerElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLAttributeTableElement extends Components.AttributeTable, HTMLStencilElement {
    }
    var HTMLAttributeTableElement: {
        prototype: HTMLAttributeTableElement;
        new (): HTMLAttributeTableElement;
    };
    interface HTMLCardModalElementEventMap {
        "showToast": ShowToastEventArgs;
    }
    interface HTMLCardModalElement extends Components.CardModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCardModalElementEventMap>(type: K, listener: (this: HTMLCardModalElement, ev: CardModalCustomEvent<HTMLCardModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCardModalElementEventMap>(type: K, listener: (this: HTMLCardModalElement, ev: CardModalCustomEvent<HTMLCardModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCardModalElement: {
        prototype: HTMLCardModalElement;
        new (): HTMLCardModalElement;
    };
    interface HTMLCardPopoverElementEventMap {
        "showToast": ShowToastEventArgs;
    }
    interface HTMLCardPopoverElement extends Components.CardPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCardPopoverElementEventMap>(type: K, listener: (this: HTMLCardPopoverElement, ev: CardPopoverCustomEvent<HTMLCardPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCardPopoverElementEventMap>(type: K, listener: (this: HTMLCardPopoverElement, ev: CardPopoverCustomEvent<HTMLCardPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCardPopoverElement: {
        prototype: HTMLCardPopoverElement;
        new (): HTMLCardPopoverElement;
    };
    interface HTMLCardViewElement extends Components.CardView, HTMLStencilElement {
    }
    var HTMLCardViewElement: {
        prototype: HTMLCardViewElement;
        new (): HTMLCardViewElement;
    };
    interface HTMLConfirmStepElement extends Components.ConfirmStep, HTMLStencilElement {
    }
    var HTMLConfirmStepElement: {
        prototype: HTMLConfirmStepElement;
        new (): HTMLConfirmStepElement;
    };
    interface HTMLInputFieldElement extends Components.InputField, HTMLStencilElement {
    }
    var HTMLInputFieldElement: {
        prototype: HTMLInputFieldElement;
        new (): HTMLInputFieldElement;
    };
    interface HTMLIntegrationViewerElement extends Components.IntegrationViewer, HTMLStencilElement {
    }
    var HTMLIntegrationViewerElement: {
        prototype: HTMLIntegrationViewerElement;
        new (): HTMLIntegrationViewerElement;
    };
    interface HTMLLoadingSpinnerElement extends Components.LoadingSpinner, HTMLStencilElement {
    }
    var HTMLLoadingSpinnerElement: {
        prototype: HTMLLoadingSpinnerElement;
        new (): HTMLLoadingSpinnerElement;
    };
    interface HTMLMooarViewerElementEventMap {
        "showToast": ShowToastEventArgs;
        "showLoader": void;
        "hideLoader": void;
    }
    interface HTMLMooarViewerElement extends Components.MooarViewer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMooarViewerElementEventMap>(type: K, listener: (this: HTMLMooarViewerElement, ev: MooarViewerCustomEvent<HTMLMooarViewerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMooarViewerElementEventMap>(type: K, listener: (this: HTMLMooarViewerElement, ev: MooarViewerCustomEvent<HTMLMooarViewerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMooarViewerElement: {
        prototype: HTMLMooarViewerElement;
        new (): HTMLMooarViewerElement;
    };
    interface HTMLNewViewerElementEventMap {
        "showToast": ShowToastEventArgs;
    }
    interface HTMLNewViewerElement extends Components.NewViewer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNewViewerElementEventMap>(type: K, listener: (this: HTMLNewViewerElement, ev: NewViewerCustomEvent<HTMLNewViewerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNewViewerElementEventMap>(type: K, listener: (this: HTMLNewViewerElement, ev: NewViewerCustomEvent<HTMLNewViewerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNewViewerElement: {
        prototype: HTMLNewViewerElement;
        new (): HTMLNewViewerElement;
    };
    interface HTMLOpenseaViewerElementEventMap {
        "showToast": ShowToastEventArgs;
        "showLoader": void;
        "hideLoader": void;
    }
    interface HTMLOpenseaViewerElement extends Components.OpenseaViewer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOpenseaViewerElementEventMap>(type: K, listener: (this: HTMLOpenseaViewerElement, ev: OpenseaViewerCustomEvent<HTMLOpenseaViewerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOpenseaViewerElementEventMap>(type: K, listener: (this: HTMLOpenseaViewerElement, ev: OpenseaViewerCustomEvent<HTMLOpenseaViewerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOpenseaViewerElement: {
        prototype: HTMLOpenseaViewerElement;
        new (): HTMLOpenseaViewerElement;
    };
    interface HTMLPopoverDialogElement extends Components.PopoverDialog, HTMLStencilElement {
    }
    var HTMLPopoverDialogElement: {
        prototype: HTMLPopoverDialogElement;
        new (): HTMLPopoverDialogElement;
    };
    interface HTMLSecurityStatusElement extends Components.SecurityStatus, HTMLStencilElement {
    }
    var HTMLSecurityStatusElement: {
        prototype: HTMLSecurityStatusElement;
        new (): HTMLSecurityStatusElement;
    };
    interface HTMLSelectFieldElement extends Components.SelectField, HTMLStencilElement {
    }
    var HTMLSelectFieldElement: {
        prototype: HTMLSelectFieldElement;
        new (): HTMLSelectFieldElement;
    };
    interface HTMLSelectStepElement extends Components.SelectStep, HTMLStencilElement {
    }
    var HTMLSelectStepElement: {
        prototype: HTMLSelectStepElement;
        new (): HTMLSelectStepElement;
    };
    interface HTMLStartTabElement extends Components.StartTab, HTMLStencilElement {
    }
    var HTMLStartTabElement: {
        prototype: HTMLStartTabElement;
        new (): HTMLStartTabElement;
    };
    interface HTMLStsViewerElementEventMap {
        "showToast": ShowToastEventArgs;
        "showLoader": void;
        "hideLoader": void;
    }
    interface HTMLStsViewerElement extends Components.StsViewer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLStsViewerElementEventMap>(type: K, listener: (this: HTMLStsViewerElement, ev: StsViewerCustomEvent<HTMLStsViewerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLStsViewerElementEventMap>(type: K, listener: (this: HTMLStsViewerElement, ev: StsViewerCustomEvent<HTMLStsViewerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLStsViewerElement: {
        prototype: HTMLStsViewerElement;
        new (): HTMLStsViewerElement;
    };
    interface HTMLTabHeaderItemElement extends Components.TabHeaderItem, HTMLStencilElement {
    }
    var HTMLTabHeaderItemElement: {
        prototype: HTMLTabHeaderItemElement;
        new (): HTMLTabHeaderItemElement;
    };
    interface HTMLTabbedViewerElement extends Components.TabbedViewer, HTMLStencilElement {
    }
    var HTMLTabbedViewerElement: {
        prototype: HTMLTabbedViewerElement;
        new (): HTMLTabbedViewerElement;
    };
    interface HTMLTokenButtonElement extends Components.TokenButton, HTMLStencilElement {
    }
    var HTMLTokenButtonElement: {
        prototype: HTMLTokenButtonElement;
        new (): HTMLTokenButtonElement;
    };
    interface HTMLTokenIconElement extends Components.TokenIcon, HTMLStencilElement {
    }
    var HTMLTokenIconElement: {
        prototype: HTMLTokenIconElement;
        new (): HTMLTokenIconElement;
    };
    interface HTMLTokenInfoPopoverElement extends Components.TokenInfoPopover, HTMLStencilElement {
    }
    var HTMLTokenInfoPopoverElement: {
        prototype: HTMLTokenInfoPopoverElement;
        new (): HTMLTokenInfoPopoverElement;
    };
    interface HTMLTokenSecurityStatusElement extends Components.TokenSecurityStatus, HTMLStencilElement {
    }
    var HTMLTokenSecurityStatusElement: {
        prototype: HTMLTokenSecurityStatusElement;
        new (): HTMLTokenSecurityStatusElement;
    };
    interface HTMLTokenSecurityStatusPopoverElement extends Components.TokenSecurityStatusPopover, HTMLStencilElement {
    }
    var HTMLTokenSecurityStatusPopoverElement: {
        prototype: HTMLTokenSecurityStatusPopoverElement;
        new (): HTMLTokenSecurityStatusPopoverElement;
    };
    interface HTMLTokenViewerElementEventMap {
        "showToast": ShowToastEventArgs;
        "showLoader": void;
        "hideLoader": void;
    }
    interface HTMLTokenViewerElement extends Components.TokenViewer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTokenViewerElementEventMap>(type: K, listener: (this: HTMLTokenViewerElement, ev: TokenViewerCustomEvent<HTMLTokenViewerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTokenViewerElementEventMap>(type: K, listener: (this: HTMLTokenViewerElement, ev: TokenViewerCustomEvent<HTMLTokenViewerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTokenViewerElement: {
        prototype: HTMLTokenViewerElement;
        new (): HTMLTokenViewerElement;
    };
    interface HTMLTokensGridElementEventMap {
        "showToast": ShowToastEventArgs;
        "showLoader": void;
        "hideLoader": void;
    }
    interface HTMLTokensGridElement extends Components.TokensGrid, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTokensGridElementEventMap>(type: K, listener: (this: HTMLTokensGridElement, ev: TokensGridCustomEvent<HTMLTokensGridElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTokensGridElementEventMap>(type: K, listener: (this: HTMLTokensGridElement, ev: TokensGridCustomEvent<HTMLTokensGridElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTokensGridElement: {
        prototype: HTMLTokensGridElement;
        new (): HTMLTokensGridElement;
    };
    interface HTMLTokensGridItemElement extends Components.TokensGridItem, HTMLStencilElement {
    }
    var HTMLTokensGridItemElement: {
        prototype: HTMLTokensGridItemElement;
        new (): HTMLTokensGridItemElement;
    };
    interface HTMLTokenscriptButtonElement extends Components.TokenscriptButton, HTMLStencilElement {
    }
    var HTMLTokenscriptButtonElement: {
        prototype: HTMLTokenscriptButtonElement;
        new (): HTMLTokenscriptButtonElement;
    };
    interface HTMLTokenscriptGridElement extends Components.TokenscriptGrid, HTMLStencilElement {
    }
    var HTMLTokenscriptGridElement: {
        prototype: HTMLTokenscriptGridElement;
        new (): HTMLTokenscriptGridElement;
    };
    interface HTMLTransferDialogElementEventMap {
        "showToast": ShowToastEventArgs;
        "showLoader": void;
        "hideLoader": void;
    }
    interface HTMLTransferDialogElement extends Components.TransferDialog, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTransferDialogElementEventMap>(type: K, listener: (this: HTMLTransferDialogElement, ev: TransferDialogCustomEvent<HTMLTransferDialogElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTransferDialogElementEventMap>(type: K, listener: (this: HTMLTransferDialogElement, ev: TransferDialogCustomEvent<HTMLTransferDialogElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTransferDialogElement: {
        prototype: HTMLTransferDialogElement;
        new (): HTMLTransferDialogElement;
    };
    interface HTMLViewStepElementEventMap {
        "showToast": ShowToastEventArgs;
    }
    interface HTMLViewStepElement extends Components.ViewStep, HTMLStencilElement {
        addEventListener<K extends keyof HTMLViewStepElementEventMap>(type: K, listener: (this: HTMLViewStepElement, ev: ViewStepCustomEvent<HTMLViewStepElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLViewStepElementEventMap>(type: K, listener: (this: HTMLViewStepElement, ev: ViewStepCustomEvent<HTMLViewStepElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLViewStepElement: {
        prototype: HTMLViewStepElement;
        new (): HTMLViewStepElement;
    };
    interface HTMLViewerPopoverElementEventMap {
        "showToast": ShowToastEventArgs;
        "showLoader": void;
        "hideLoader": void;
    }
    interface HTMLViewerPopoverElement extends Components.ViewerPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLViewerPopoverElementEventMap>(type: K, listener: (this: HTMLViewerPopoverElement, ev: ViewerPopoverCustomEvent<HTMLViewerPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLViewerPopoverElementEventMap>(type: K, listener: (this: HTMLViewerPopoverElement, ev: ViewerPopoverCustomEvent<HTMLViewerPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLViewerPopoverElement: {
        prototype: HTMLViewerPopoverElement;
        new (): HTMLViewerPopoverElement;
    };
    interface HTMLViewerTabElementEventMap {
        "showToast": ShowToastEventArgs;
    }
    interface HTMLViewerTabElement extends Components.ViewerTab, HTMLStencilElement {
        addEventListener<K extends keyof HTMLViewerTabElementEventMap>(type: K, listener: (this: HTMLViewerTabElement, ev: ViewerTabCustomEvent<HTMLViewerTabElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLViewerTabElementEventMap>(type: K, listener: (this: HTMLViewerTabElement, ev: ViewerTabCustomEvent<HTMLViewerTabElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLViewerTabElement: {
        prototype: HTMLViewerTabElement;
        new (): HTMLViewerTabElement;
    };
    interface HTMLWalletButtonElement extends Components.WalletButton, HTMLStencilElement {
    }
    var HTMLWalletButtonElement: {
        prototype: HTMLWalletButtonElement;
        new (): HTMLWalletButtonElement;
    };
    interface HTMLWalletSelectorElement extends Components.WalletSelector, HTMLStencilElement {
    }
    var HTMLWalletSelectorElement: {
        prototype: HTMLWalletSelectorElement;
        new (): HTMLWalletSelectorElement;
    };
    interface HTMLElementTagNameMap {
        "about-tokenscript": HTMLAboutTokenscriptElement;
        "action-bar": HTMLActionBarElement;
        "action-overflow-modal": HTMLActionOverflowModalElement;
        "add-selector": HTMLAddSelectorElement;
        "alphawallet-viewer": HTMLAlphawalletViewerElement;
        "app-root": HTMLAppRootElement;
        "attribute-table": HTMLAttributeTableElement;
        "card-modal": HTMLCardModalElement;
        "card-popover": HTMLCardPopoverElement;
        "card-view": HTMLCardViewElement;
        "confirm-step": HTMLConfirmStepElement;
        "input-field": HTMLInputFieldElement;
        "integration-viewer": HTMLIntegrationViewerElement;
        "loading-spinner": HTMLLoadingSpinnerElement;
        "mooar-viewer": HTMLMooarViewerElement;
        "new-viewer": HTMLNewViewerElement;
        "opensea-viewer": HTMLOpenseaViewerElement;
        "popover-dialog": HTMLPopoverDialogElement;
        "security-status": HTMLSecurityStatusElement;
        "select-field": HTMLSelectFieldElement;
        "select-step": HTMLSelectStepElement;
        "start-tab": HTMLStartTabElement;
        "sts-viewer": HTMLStsViewerElement;
        "tab-header-item": HTMLTabHeaderItemElement;
        "tabbed-viewer": HTMLTabbedViewerElement;
        "token-button": HTMLTokenButtonElement;
        "token-icon": HTMLTokenIconElement;
        "token-info-popover": HTMLTokenInfoPopoverElement;
        "token-security-status": HTMLTokenSecurityStatusElement;
        "token-security-status-popover": HTMLTokenSecurityStatusPopoverElement;
        "token-viewer": HTMLTokenViewerElement;
        "tokens-grid": HTMLTokensGridElement;
        "tokens-grid-item": HTMLTokensGridItemElement;
        "tokenscript-button": HTMLTokenscriptButtonElement;
        "tokenscript-grid": HTMLTokenscriptGridElement;
        "transfer-dialog": HTMLTransferDialogElement;
        "view-step": HTMLViewStepElement;
        "viewer-popover": HTMLViewerPopoverElement;
        "viewer-tab": HTMLViewerTabElement;
        "wallet-button": HTMLWalletButtonElement;
        "wallet-selector": HTMLWalletSelectorElement;
    }
}
declare namespace LocalJSX {
    interface AboutTokenscript {
    }
    interface ActionBar {
        "actionsEnabled"?: boolean;
        "engine"?: TokenScriptEngine;
        "onHideLoader"?: (event: ActionBarCustomEvent<void>) => void;
        "onShowLoader"?: (event: ActionBarCustomEvent<void>) => void;
        "onShowToast"?: (event: ActionBarCustomEvent<ShowToastEventArgs>) => void;
        "tokenDetails"?: ITokenDetail;
        "tokenScript"?: TokenScript;
    }
    interface ActionOverflowModal {
    }
    interface AddSelector {
        "onFormSubmit"?: (type: TokenScriptSource, data: {tsId?: string, xml?: File}) => Promise<void>;
    }
    interface AlphawalletViewer {
        "app"?: AppRoot;
        "onHideLoader"?: (event: AlphawalletViewerCustomEvent<void>) => void;
        "onShowLoader"?: (event: AlphawalletViewerCustomEvent<void>) => void;
        "onShowToast"?: (event: AlphawalletViewerCustomEvent<ShowToastEventArgs>) => void;
    }
    interface AppRoot {
    }
    interface AttributeTable {
    }
    interface CardModal {
        "onShowToast"?: (event: CardModalCustomEvent<ShowToastEventArgs>) => void;
        "tokenScript"?: TokenScript1;
    }
    interface CardPopover {
        "onShowToast"?: (event: CardPopoverCustomEvent<ShowToastEventArgs>) => void;
        "tokenScript"?: TokenScript;
    }
    interface CardView {
    }
    interface ConfirmStep {
        "tokenScript"?: TokenScript1;
        "viewer"?: IntegrationViewer;
    }
    interface InputField {
        "label"?: string;
        "name"?: string;
        "pattern"?: string;
        "required"?: boolean;
        "type"?: string;
        "value"?: any;
    }
    interface IntegrationViewer {
        "app"?: AppRoot;
    }
    interface LoadingSpinner {
        "color"?: string;
        "size"?: "large"|"small";
    }
    interface MooarViewer {
        "app"?: AppRoot;
        "onHideLoader"?: (event: MooarViewerCustomEvent<void>) => void;
        "onShowLoader"?: (event: MooarViewerCustomEvent<void>) => void;
        "onShowToast"?: (event: MooarViewerCustomEvent<ShowToastEventArgs>) => void;
    }
    interface NewViewer {
        "app"?: AppRoot;
        "onShowToast"?: (event: NewViewerCustomEvent<ShowToastEventArgs>) => void;
    }
    interface OpenseaViewer {
        "app"?: AppRoot;
        "onHideLoader"?: (event: OpenseaViewerCustomEvent<void>) => void;
        "onShowLoader"?: (event: OpenseaViewerCustomEvent<void>) => void;
        "onShowToast"?: (event: OpenseaViewerCustomEvent<ShowToastEventArgs>) => void;
    }
    interface PopoverDialog {
        "dialogStyles"?: {[cssProp: string]: string};
        "disableClose"?: boolean;
        "fullScreen"?: boolean;
    }
    interface SecurityStatus {
        "size"?: "large"|"small";
        "tokenScript"?: TokenScript1;
    }
    interface SelectField {
        "label"?: string;
        "name"?: string;
        "options"?: {label: string, value: string}[];
        "value"?: string;
    }
    interface SelectStep {
        "card"?: Card;
        "tokenScript"?: TokenScript1;
        "viewer"?: IntegrationViewer;
    }
    interface StartTab {
        "tabId"?: string;
        "tabView"?: TabbedViewer;
    }
    interface StsViewer {
        "app"?: AppRoot;
        "onHideLoader"?: (event: StsViewerCustomEvent<void>) => void;
        "onShowLoader"?: (event: StsViewerCustomEvent<void>) => void;
        "onShowToast"?: (event: StsViewerCustomEvent<ShowToastEventArgs>) => void;
    }
    interface TabHeaderItem {
        "closable"?: boolean;
        "tabId"?: string;
        "tabTitle"?: string;
        "tabView"?: TabbedViewer;
    }
    interface TabbedViewer {
        "app"?: AppRoot;
    }
    interface TokenButton {
        "buttonTitle"?: string;
        "clickHandler"?: (token: TokenGridContext) => void;
        "enabled"?: boolean;
        "token"?: TokenGridContext;
    }
    interface TokenIcon {
        "imageTitle"?: string;
        "src"?: string;
    }
    interface TokenInfoPopover {
        "tokenScript"?: TokenScript;
    }
    interface TokenSecurityStatus {
        "originId"?: string;
        "tokenScript"?: TokenScript1;
    }
    interface TokenSecurityStatusPopover {
    }
    interface TokenViewer {
        "app"?: AppRoot;
        "onHideLoader"?: (event: TokenViewerCustomEvent<void>) => void;
        "onShowLoader"?: (event: TokenViewerCustomEvent<void>) => void;
        "onShowToast"?: (event: TokenViewerCustomEvent<ShowToastEventArgs>) => void;
    }
    interface TokensGrid {
        "onHideLoader"?: (event: TokensGridCustomEvent<void>) => void;
        "onShowLoader"?: (event: TokensGridCustomEvent<void>) => void;
        "onShowToast"?: (event: TokensGridCustomEvent<ShowToastEventArgs>) => void;
        "openActionOverflowModal"?: (buttons: JSX.Element[]) => void;
        "showCard"?: (card: Card, token?: TokenGridContext, cardIndex?: number) => void;
        "tokenScript"?: TokenScript1;
    }
    interface TokensGridItem {
        "openActionOverflowModal"?: (buttons: JSX.Element[]) => void;
        "showCard"?: (card: Card, token: TokenGridContext, index: number) => void;
        "token"?: TokenGridContext;
        "tokenScript"?: TokenScript1;
    }
    interface TokenscriptButton {
        "enabled"?: boolean;
        "imageUrl"?: string;
        "name"?: string;
        "onRemove"?: (tsId: string) => Promise<void>;
        "tokenScript"?: TokenScript1;
        "tsId"?: string;
    }
    interface TokenscriptGrid {
    }
    interface TransferDialog {
        "engine"?: TokenScriptEngine;
        "onHideLoader"?: (event: TransferDialogCustomEvent<void>) => void;
        "onShowLoader"?: (event: TransferDialogCustomEvent<void>) => void;
        "onShowToast"?: (event: TransferDialogCustomEvent<ShowToastEventArgs>) => void;
        "tokenDetails"?: ITokenDetail;
    }
    interface ViewStep {
        "card"?: Card;
        "onShowToast"?: (event: ViewStepCustomEvent<ShowToastEventArgs>) => void;
        "tokenScript"?: TokenScript1;
        "viewer"?: IntegrationViewer;
    }
    interface ViewerPopover {
        "onHideLoader"?: (event: ViewerPopoverCustomEvent<void>) => void;
        "onShowLoader"?: (event: ViewerPopoverCustomEvent<void>) => void;
        "onShowToast"?: (event: ViewerPopoverCustomEvent<ShowToastEventArgs>) => void;
    }
    interface ViewerTab {
        "app"?: AppRoot;
        "onShowToast"?: (event: ViewerTabCustomEvent<ShowToastEventArgs>) => void;
        "tabId"?: string;
        "tokenScript"?: TokenScript;
    }
    interface WalletButton {
    }
    interface WalletSelector {
    }
    interface IntrinsicElements {
        "about-tokenscript": AboutTokenscript;
        "action-bar": ActionBar;
        "action-overflow-modal": ActionOverflowModal;
        "add-selector": AddSelector;
        "alphawallet-viewer": AlphawalletViewer;
        "app-root": AppRoot;
        "attribute-table": AttributeTable;
        "card-modal": CardModal;
        "card-popover": CardPopover;
        "card-view": CardView;
        "confirm-step": ConfirmStep;
        "input-field": InputField;
        "integration-viewer": IntegrationViewer;
        "loading-spinner": LoadingSpinner;
        "mooar-viewer": MooarViewer;
        "new-viewer": NewViewer;
        "opensea-viewer": OpenseaViewer;
        "popover-dialog": PopoverDialog;
        "security-status": SecurityStatus;
        "select-field": SelectField;
        "select-step": SelectStep;
        "start-tab": StartTab;
        "sts-viewer": StsViewer;
        "tab-header-item": TabHeaderItem;
        "tabbed-viewer": TabbedViewer;
        "token-button": TokenButton;
        "token-icon": TokenIcon;
        "token-info-popover": TokenInfoPopover;
        "token-security-status": TokenSecurityStatus;
        "token-security-status-popover": TokenSecurityStatusPopover;
        "token-viewer": TokenViewer;
        "tokens-grid": TokensGrid;
        "tokens-grid-item": TokensGridItem;
        "tokenscript-button": TokenscriptButton;
        "tokenscript-grid": TokenscriptGrid;
        "transfer-dialog": TransferDialog;
        "view-step": ViewStep;
        "viewer-popover": ViewerPopover;
        "viewer-tab": ViewerTab;
        "wallet-button": WalletButton;
        "wallet-selector": WalletSelector;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "about-tokenscript": LocalJSX.AboutTokenscript & JSXBase.HTMLAttributes<HTMLAboutTokenscriptElement>;
            "action-bar": LocalJSX.ActionBar & JSXBase.HTMLAttributes<HTMLActionBarElement>;
            "action-overflow-modal": LocalJSX.ActionOverflowModal & JSXBase.HTMLAttributes<HTMLActionOverflowModalElement>;
            "add-selector": LocalJSX.AddSelector & JSXBase.HTMLAttributes<HTMLAddSelectorElement>;
            "alphawallet-viewer": LocalJSX.AlphawalletViewer & JSXBase.HTMLAttributes<HTMLAlphawalletViewerElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "attribute-table": LocalJSX.AttributeTable & JSXBase.HTMLAttributes<HTMLAttributeTableElement>;
            "card-modal": LocalJSX.CardModal & JSXBase.HTMLAttributes<HTMLCardModalElement>;
            "card-popover": LocalJSX.CardPopover & JSXBase.HTMLAttributes<HTMLCardPopoverElement>;
            "card-view": LocalJSX.CardView & JSXBase.HTMLAttributes<HTMLCardViewElement>;
            "confirm-step": LocalJSX.ConfirmStep & JSXBase.HTMLAttributes<HTMLConfirmStepElement>;
            "input-field": LocalJSX.InputField & JSXBase.HTMLAttributes<HTMLInputFieldElement>;
            "integration-viewer": LocalJSX.IntegrationViewer & JSXBase.HTMLAttributes<HTMLIntegrationViewerElement>;
            "loading-spinner": LocalJSX.LoadingSpinner & JSXBase.HTMLAttributes<HTMLLoadingSpinnerElement>;
            "mooar-viewer": LocalJSX.MooarViewer & JSXBase.HTMLAttributes<HTMLMooarViewerElement>;
            "new-viewer": LocalJSX.NewViewer & JSXBase.HTMLAttributes<HTMLNewViewerElement>;
            "opensea-viewer": LocalJSX.OpenseaViewer & JSXBase.HTMLAttributes<HTMLOpenseaViewerElement>;
            "popover-dialog": LocalJSX.PopoverDialog & JSXBase.HTMLAttributes<HTMLPopoverDialogElement>;
            "security-status": LocalJSX.SecurityStatus & JSXBase.HTMLAttributes<HTMLSecurityStatusElement>;
            "select-field": LocalJSX.SelectField & JSXBase.HTMLAttributes<HTMLSelectFieldElement>;
            "select-step": LocalJSX.SelectStep & JSXBase.HTMLAttributes<HTMLSelectStepElement>;
            "start-tab": LocalJSX.StartTab & JSXBase.HTMLAttributes<HTMLStartTabElement>;
            "sts-viewer": LocalJSX.StsViewer & JSXBase.HTMLAttributes<HTMLStsViewerElement>;
            "tab-header-item": LocalJSX.TabHeaderItem & JSXBase.HTMLAttributes<HTMLTabHeaderItemElement>;
            "tabbed-viewer": LocalJSX.TabbedViewer & JSXBase.HTMLAttributes<HTMLTabbedViewerElement>;
            "token-button": LocalJSX.TokenButton & JSXBase.HTMLAttributes<HTMLTokenButtonElement>;
            "token-icon": LocalJSX.TokenIcon & JSXBase.HTMLAttributes<HTMLTokenIconElement>;
            "token-info-popover": LocalJSX.TokenInfoPopover & JSXBase.HTMLAttributes<HTMLTokenInfoPopoverElement>;
            "token-security-status": LocalJSX.TokenSecurityStatus & JSXBase.HTMLAttributes<HTMLTokenSecurityStatusElement>;
            "token-security-status-popover": LocalJSX.TokenSecurityStatusPopover & JSXBase.HTMLAttributes<HTMLTokenSecurityStatusPopoverElement>;
            "token-viewer": LocalJSX.TokenViewer & JSXBase.HTMLAttributes<HTMLTokenViewerElement>;
            "tokens-grid": LocalJSX.TokensGrid & JSXBase.HTMLAttributes<HTMLTokensGridElement>;
            "tokens-grid-item": LocalJSX.TokensGridItem & JSXBase.HTMLAttributes<HTMLTokensGridItemElement>;
            "tokenscript-button": LocalJSX.TokenscriptButton & JSXBase.HTMLAttributes<HTMLTokenscriptButtonElement>;
            "tokenscript-grid": LocalJSX.TokenscriptGrid & JSXBase.HTMLAttributes<HTMLTokenscriptGridElement>;
            "transfer-dialog": LocalJSX.TransferDialog & JSXBase.HTMLAttributes<HTMLTransferDialogElement>;
            "view-step": LocalJSX.ViewStep & JSXBase.HTMLAttributes<HTMLViewStepElement>;
            "viewer-popover": LocalJSX.ViewerPopover & JSXBase.HTMLAttributes<HTMLViewerPopoverElement>;
            "viewer-tab": LocalJSX.ViewerTab & JSXBase.HTMLAttributes<HTMLViewerTabElement>;
            "wallet-button": LocalJSX.WalletButton & JSXBase.HTMLAttributes<HTMLWalletButtonElement>;
            "wallet-selector": LocalJSX.WalletSelector & JSXBase.HTMLAttributes<HTMLWalletSelectorElement>;
        }
    }
}
